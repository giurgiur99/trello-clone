{"ast":null,"code":"import { Validators } from \"@angular/forms\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"../../share/authentication.service\";\nimport * as i3 from \"src/app/core/services/custom-validation.service\";\nimport * as i4 from \"@angular/router\";\nimport * as i5 from \"@angular/flex-layout/flex\";\nimport * as i6 from \"@angular/material/form-field\";\nimport * as i7 from \"@angular/material/input\";\nimport * as i8 from \"@angular/common\";\nimport * as i9 from \"@angular/material/button\";\nimport * as i10 from \"@angular/material/icon\";\n\nfunction SignInComponent_mat_error_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \" You must provide a \");\n    i0.ɵɵelementStart(2, \"strong\");\n    i0.ɵɵtext(3, \"username\");\n    i0.ɵɵelementEnd()();\n  }\n}\n\nfunction SignInComponent_mat_error_9_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \" Letters, numbers, dashes, and underscores only. \");\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction SignInComponent_mat_error_10_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \" Password must be greater than 4 and less than 20 characteres \");\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction SignInComponent_mat_error_19_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \" You must provide a \");\n    i0.ɵɵelementStart(2, \"strong\");\n    i0.ɵɵtext(3, \"password\");\n    i0.ɵɵelementEnd()();\n  }\n}\n\nfunction SignInComponent_mat_error_20_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \" Password must be greater than 6 and less than 30 characteres \");\n    i0.ɵɵelementEnd();\n  }\n}\n\nexport let SignInComponent = /*#__PURE__*/(() => {\n  class SignInComponent {\n    constructor(formBuilder, authenticationService, customValidationService, router) {\n      this.formBuilder = formBuilder;\n      this.authenticationService = authenticationService;\n      this.customValidationService = customValidationService;\n      this.router = router;\n      this.isHide = true;\n    }\n\n    ngOnInit() {\n      this.createFormGroup();\n    }\n\n    createFormGroup() {\n      this.signInForm = this.formBuilder.group({\n        username: [\"\", Validators.compose([Validators.required, this.customValidationService.MinLengthAndMaxlengthValidator(4, 20), this.customValidationService.PatternAndMinLengthValidator(4)])],\n        password: [\"\", Validators.compose([Validators.required, this.customValidationService.MinLengthAndMaxlengthValidator(6, 30)])]\n      });\n    }\n\n    signIn(formDirective) {\n      this.authenticationService.signIn(this.signInForm.value).subscribe(jwtResponse => {\n        formDirective.resetForm();\n        this.signInForm.reset();\n        console.log(jwtResponse.roles);\n\n        if (jwtResponse.roles[0] === \"ROLE_ADMIN\") {\n          console.log(\"admin here\");\n          this.router.navigate([\"admin\"]);\n        } else this.router.navigate([\"user/\" + jwtResponse.username + \"/boards\"]);\n      });\n    }\n\n    get getSignInForm() {\n      return this.signInForm.controls;\n    }\n\n    signUpRoute() {\n      this.router.navigate([\"auth/signup\"]);\n    }\n\n    toggleIsHide() {\n      this.isHide = !this.isHide;\n    }\n\n  }\n\n  SignInComponent.ɵfac = function SignInComponent_Factory(t) {\n    return new (t || SignInComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.AuthenticationService), i0.ɵɵdirectiveInject(i3.CustomValidationService), i0.ɵɵdirectiveInject(i4.Router));\n  };\n\n  SignInComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: SignInComponent,\n    selectors: [[\"app-sign-in\"]],\n    decls: 25,\n    vars: 11,\n    consts: [[\"fxLayout\", \"column\", 1, \"form\", 3, \"formGroup\", \"keydown.enter\", \"ngSubmit\"], [\"formDirective\", \"ngForm\"], [\"fxFlexAlign\", \"center\"], [\"matInput\", \"\", \"formControlName\", \"username\", \"required\", \"\"], [4, \"ngIf\"], [\"matInput\", \"\", \"autocomplete\", \"off\", \"formControlName\", \"password\", \"required\", \"\", 3, \"type\"], [\"mat-icon-button\", \"\", \"matSuffix\", \"\", 3, \"click\"], [\"mat-button\", \"\", \"color\", \"primary\", 3, \"click\"], [\"mat-raised-button\", \"\", \"color\", \"primary\", \"type\", \"submit\", 3, \"disabled\"]],\n    template: function SignInComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        const _r6 = i0.ɵɵgetCurrentView();\n\n        i0.ɵɵelementStart(0, \"form\", 0, 1);\n        i0.ɵɵlistener(\"keydown.enter\", function SignInComponent_Template_form_keydown_enter_0_listener($event) {\n          return $event.preventDefault();\n        })(\"ngSubmit\", function SignInComponent_Template_form_ngSubmit_0_listener() {\n          i0.ɵɵrestoreView(_r6);\n\n          const _r0 = i0.ɵɵreference(1);\n\n          return ctx.signIn(_r0);\n        });\n        i0.ɵɵelementStart(2, \"h1\", 2);\n        i0.ɵɵtext(3, \"Login\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(4, \"mat-form-field\")(5, \"mat-label\");\n        i0.ɵɵtext(6, \"Username\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(7, \"input\", 3);\n        i0.ɵɵtemplate(8, SignInComponent_mat_error_8_Template, 4, 0, \"mat-error\", 4);\n        i0.ɵɵtemplate(9, SignInComponent_mat_error_9_Template, 2, 0, \"mat-error\", 4);\n        i0.ɵɵtemplate(10, SignInComponent_mat_error_10_Template, 2, 0, \"mat-error\", 4);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(11, \"br\");\n        i0.ɵɵelementStart(12, \"mat-form-field\")(13, \"mat-label\");\n        i0.ɵɵtext(14, \"password\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(15, \"input\", 5);\n        i0.ɵɵelementStart(16, \"button\", 6);\n        i0.ɵɵlistener(\"click\", function SignInComponent_Template_button_click_16_listener() {\n          return ctx.toggleIsHide();\n        });\n        i0.ɵɵelementStart(17, \"mat-icon\");\n        i0.ɵɵtext(18);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵtemplate(19, SignInComponent_mat_error_19_Template, 4, 0, \"mat-error\", 4);\n        i0.ɵɵtemplate(20, SignInComponent_mat_error_20_Template, 2, 0, \"mat-error\", 4);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(21, \"button\", 7);\n        i0.ɵɵlistener(\"click\", function SignInComponent_Template_button_click_21_listener() {\n          return ctx.signUpRoute();\n        });\n        i0.ɵɵtext(22, \"Register\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(23, \"button\", 8);\n        i0.ɵɵtext(24, \"Login\");\n        i0.ɵɵelementEnd()();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵproperty(\"formGroup\", ctx.signInForm);\n        i0.ɵɵadvance(8);\n        i0.ɵɵproperty(\"ngIf\", ctx.getSignInForm.username.errors == null ? null : ctx.getSignInForm.username.errors.required);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.getSignInForm.username.errors == null ? null : ctx.getSignInForm.username.errors.invalidPassword);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.getSignInForm.username.errors == null ? null : ctx.getSignInForm.username.errors.MinLengthAndMaxlengthValidator);\n        i0.ɵɵadvance(5);\n        i0.ɵɵproperty(\"type\", ctx.isHide ? \"password\" : \"text\");\n        i0.ɵɵadvance(1);\n        i0.ɵɵattribute(\"aria-label\", \"Hide password\")(\"aria-pressed\", ctx.isHide);\n        i0.ɵɵadvance(2);\n        i0.ɵɵtextInterpolate(ctx.isHide ? \"visibility_off\" : \"visibility\");\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.getSignInForm.password.errors == null ? null : ctx.getSignInForm.password.errors.required);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.getSignInForm.password.errors == null ? null : ctx.getSignInForm.password.errors.MinLengthAndMaxlengthValidator);\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"disabled\", ctx.signInForm.invalid);\n      }\n    },\n    directives: [i1.ɵNgNoValidate, i1.NgControlStatusGroup, i5.DefaultLayoutDirective, i1.FormGroupDirective, i5.DefaultFlexAlignDirective, i6.MatFormField, i6.MatLabel, i7.MatInput, i1.DefaultValueAccessor, i1.NgControlStatus, i1.FormControlName, i1.RequiredValidator, i8.NgIf, i6.MatError, i9.MatButton, i6.MatSuffix, i10.MatIcon],\n    styles: [\"\"]\n  });\n  return SignInComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}