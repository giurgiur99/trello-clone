{"ast":null,"code":"import { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/core/http/http.service\";\nexport let CardService = /*#__PURE__*/(() => {\n  class CardService {\n    constructor(httpService) {\n      this.httpService = httpService;\n    }\n\n    saveName(idColumn, nameRequest) {\n      return this.httpService.post(`${environment.cardEndpoint}/${idColumn}`, nameRequest);\n    }\n\n    updateName(idColumn, nameRequest) {\n      return this.httpService.put(`${environment.cardEndpoint}/${idColumn}`, nameRequest);\n    }\n\n    findById(id) {\n      return this.httpService.findById(`${environment.cardEndpoint}/${id}`);\n    }\n\n    deleteById(id) {\n      return this.httpService.deleteById(`${environment.cardEndpoint}/${id}`);\n    }\n\n    uploadFiles(id, files) {\n      return this.httpService.put(`${environment.cardEndpoint}/${id}/attachment`, files);\n    }\n\n    updateDescription(id, descriptionRequest) {\n      return this.httpService.put(`${environment.cardEndpoint}/${id}/description`, descriptionRequest);\n    }\n\n    deleteAttachmentById(id, idCard) {\n      return this.httpService.deleteById(`${environment.cardEndpoint}/${id}/attachment/${idCard}`);\n    }\n\n    setCover(cardId, idAttachment) {\n      return this.httpService.put(`${environment.cardEndpoint}/${cardId}/attachment/${idAttachment}/cover`, '');\n    }\n\n    removeCover(cardId, idAttachment) {\n      return this.httpService.deleteById(`${environment.cardEndpoint}/${cardId}/attachment/${idAttachment}/cover`);\n    }\n\n    moveCardToAnotherColumn(idCurrentCard, desiredPosition, idColumn) {\n      return this.httpService.put(`${environment.cardEndpoint}/${idColumn}/moveCardToAnotherColumn/${idCurrentCard}/${desiredPosition}`, '');\n    }\n\n    changePosition(idReference, currentPosition, desiredPosition) {\n      return this.httpService.put(`${environment.columnEndpoint}/${idReference}/${currentPosition}/${desiredPosition}`, '');\n    }\n\n    changeCardPosition(idReference, currentPosition, desiredPosition) {\n      return this.httpService.put(`${environment.cardEndpoint}/${idReference}/${currentPosition}/${desiredPosition}`, '');\n    }\n\n  }\n\n  CardService.ɵfac = function CardService_Factory(t) {\n    return new (t || CardService)(i0.ɵɵinject(i1.HttpService));\n  };\n\n  CardService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: CardService,\n    factory: CardService.ɵfac,\n    providedIn: 'root'\n  });\n  return CardService;\n})();","map":null,"metadata":{},"sourceType":"module"}