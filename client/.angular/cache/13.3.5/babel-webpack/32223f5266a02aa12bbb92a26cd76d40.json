{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport { ConfirmDialogRequest } from \"src/app/core/interface/core.interface\";\nimport { CardDetailsComponent } from \"src/app/modules/board-details/pages/card-details/card-details.component\";\nimport { ConfirmDialogComponent } from \"src/app/shared/component/confirm-dialog/confirm-dialog.component\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/admin/users-view/services/user.service\";\nimport * as i2 from \"src/app/modules/board-details/share/boards-details.service\";\nimport * as i3 from \"src/app/modules/board-details/share/column.service\";\nimport * as i4 from \"src/app/modules/board-details/share/card.service\";\nimport * as i5 from \"src/app/shared/component/form-name-dialog/form-name-dialog.service\";\nimport * as i6 from \"@angular/router\";\nimport * as i7 from \"@angular/material/dialog\";\nimport * as i8 from \"ngx-spinner\";\nimport * as i9 from \"src/app/core/services/notification.service\";\nimport * as i10 from \"../nav-menu/main.component\";\nimport * as i11 from \"@angular/material/form-field\";\nimport * as i12 from \"@angular/material/select\";\nimport * as i13 from \"@angular/common\";\nimport * as i14 from \"@angular/material/core\";\nimport * as i15 from \"@angular/flex-layout/flex\";\nimport * as i16 from \"@angular/material/toolbar\";\nimport * as i17 from \"@angular/material/card\";\nimport * as i18 from \"@angular/material/list\";\nimport * as i19 from \"@angular/flex-layout/extended\";\nimport * as i20 from \"@angular/material/icon\";\nimport * as i21 from \"@angular/material/button\";\nimport * as i22 from \"@angular/material/divider\";\n\nfunction UpdateBoardComponent_mat_option_9_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r5 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"mat-option\", 11);\n    i0.ɵɵlistener(\"onSelectionChange\", function UpdateBoardComponent_mat_option_9_Template_mat_option_onSelectionChange_0_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r5);\n      const user_r3 = restoredCtx.$implicit;\n      const ctx_r4 = i0.ɵɵnextContext();\n      return ctx_r4.updateBoardList(user_r3);\n    });\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const user_r3 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", user_r3.name);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", user_r3.name, \" \");\n  }\n}\n\nfunction UpdateBoardComponent_mat_option_16_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-option\", 12);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const board_r6 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", board_r6.name);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", board_r6.name, \" \");\n  }\n}\n\nfunction UpdateBoardComponent_mat_card_26_mat_list_item_5_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 30);\n    i0.ɵɵelement(1, \"img\", 31);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const card_r9 = i0.ɵɵnextContext().$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵpropertyInterpolate1(\"src\", \"data:image/jpeg;base64,\", card_r9.cover == null ? null : card_r9.cover.file.data, \"\", i0.ɵɵsanitizeUrl);\n    i0.ɵɵpropertyInterpolate(\"alt\", card_r9.cover == null ? null : card_r9.cover.name);\n  }\n}\n\nfunction UpdateBoardComponent_mat_card_26_mat_list_item_5_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r13 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"mat-list-item\", 22);\n    i0.ɵɵtemplate(1, UpdateBoardComponent_mat_card_26_mat_list_item_5_div_1_Template, 2, 2, \"div\", 23);\n    i0.ɵɵelementStart(2, \"div\", 24);\n    i0.ɵɵlistener(\"click\", function UpdateBoardComponent_mat_card_26_mat_list_item_5_Template_div_click_2_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r13);\n      const card_r9 = restoredCtx.$implicit;\n      const column_r7 = i0.ɵɵnextContext().$implicit;\n      const ctx_r12 = i0.ɵɵnextContext();\n      return ctx_r12.openCardDialog(card_r9.id, column_r7.id);\n    });\n    i0.ɵɵelementStart(3, \"h4\", 25);\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(5, \"div\", 26)(6, \"mat-icon\");\n    i0.ɵɵtext(7, \" attach_file \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(8, \"span\");\n    i0.ɵɵtext(9);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(10, \"span\", 27);\n    i0.ɵɵelementStart(11, \"span\", 28)(12, \"button\", 29);\n    i0.ɵɵlistener(\"click\", function UpdateBoardComponent_mat_card_26_mat_list_item_5_Template_button_click_12_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r13);\n      const card_r9 = restoredCtx.$implicit;\n      const ctx_r15 = i0.ɵɵnextContext(2);\n      return ctx_r15.deleteCard(card_r9.id);\n    });\n    i0.ɵɵelementStart(13, \"mat-icon\");\n    i0.ɵɵtext(14, \"delete_forever\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(15, \"button\", 29);\n    i0.ɵɵlistener(\"click\", function UpdateBoardComponent_mat_card_26_mat_list_item_5_Template_button_click_15_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r13);\n      const card_r9 = restoredCtx.$implicit;\n      const ctx_r16 = i0.ɵɵnextContext(2);\n      return ctx_r16.updateCardName(card_r9.id, card_r9.name);\n    });\n    i0.ɵɵelementStart(16, \"mat-icon\");\n    i0.ɵɵtext(17, \" short_text\");\n    i0.ɵɵelementEnd()()()();\n    i0.ɵɵelement(18, \"mat-divider\");\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const card_r9 = ctx.$implicit;\n    i0.ɵɵproperty(\"cdkDragData\", card_r9);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", card_r9.cover == null ? null : card_r9.cover.file);\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(card_r9.name);\n    i0.ɵɵadvance(5);\n    i0.ɵɵtextInterpolate(card_r9.fileSize);\n  }\n}\n\nfunction UpdateBoardComponent_mat_card_26_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r18 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"mat-card\", 13)(1, \"mat-card-title\", 14);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"mat-card-content\")(4, \"mat-list\", 15);\n    i0.ɵɵlistener(\"cdkDropListDropped\", function UpdateBoardComponent_mat_card_26_Template_mat_list_cdkDropListDropped_4_listener($event) {\n      i0.ɵɵrestoreView(_r18);\n      const ctx_r17 = i0.ɵɵnextContext();\n      return ctx_r17.onDropCards($event);\n    });\n    i0.ɵɵtemplate(5, UpdateBoardComponent_mat_card_26_mat_list_item_5_Template, 19, 4, \"mat-list-item\", 16);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(6, \"mat-card-actions\", 17)(7, \"button\", 18);\n    i0.ɵɵlistener(\"click\", function UpdateBoardComponent_mat_card_26_Template_button_click_7_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r18);\n      const column_r7 = restoredCtx.$implicit;\n      const ctx_r19 = i0.ɵɵnextContext();\n      return ctx_r19.saveCard(column_r7.id);\n    });\n    i0.ɵɵelementStart(8, \"mat-icon\");\n    i0.ɵɵtext(9, \"add_box\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(10, \"span\");\n    i0.ɵɵtext(11, \" Add new card\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(12, \"span\", 19)(13, \"button\", 20);\n    i0.ɵɵlistener(\"click\", function UpdateBoardComponent_mat_card_26_Template_button_click_13_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r18);\n      const column_r7 = restoredCtx.$implicit;\n      const ctx_r20 = i0.ɵɵnextContext();\n      return ctx_r20.deleteColumn(column_r7.id);\n    });\n    i0.ɵɵtext(14, \" Delete column \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(15, \"button\", 21);\n    i0.ɵɵlistener(\"click\", function UpdateBoardComponent_mat_card_26_Template_button_click_15_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r18);\n      const column_r7 = restoredCtx.$implicit;\n      const ctx_r21 = i0.ɵɵnextContext();\n      return ctx_r21.updateColumnName(column_r7.id, column_r7.name);\n    });\n    i0.ɵɵtext(16, \" Update column \");\n    i0.ɵɵelementEnd()()()();\n  }\n\n  if (rf & 2) {\n    const column_r7 = ctx.$implicit;\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" \", column_r7.name, \" \");\n    i0.ɵɵadvance(2);\n    i0.ɵɵpropertyInterpolate(\"id\", column_r7.id);\n    i0.ɵɵproperty(\"cdkDropListData\", column_r7.cards)(\"cdkDropListConnectedTo\", ctx_r2.connectedTo);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", column_r7.cards);\n  }\n}\n\nexport let UpdateBoardComponent = /*#__PURE__*/(() => {\n  class UpdateBoardComponent {\n    constructor(userService, boardService, columnService, cardService, formNameDialogService, activatedRoute, dialog, spinner, notificationService) {\n      this.userService = userService;\n      this.boardService = boardService;\n      this.columnService = columnService;\n      this.cardService = cardService;\n      this.formNameDialogService = formNameDialogService;\n      this.activatedRoute = activatedRoute;\n      this.dialog = dialog;\n      this.spinner = spinner;\n      this.notificationService = notificationService;\n      this.users = [];\n      this.boards = []; //--------------------------------\n\n      this.board = {\n        columns: [],\n        id: \"\",\n        name: \"\",\n        createdBy: \"\",\n        createdDate: undefined,\n        updatedBy: \"\",\n        updatedDate: undefined\n      };\n      this.id = \"\";\n      this.connectedTo = [];\n    }\n\n    ngOnInit() {\n      return __awaiter(this, void 0, void 0, function* () {\n        this.users = yield this.userService.getCustomer();\n        this.spinner.show();\n        this.activatedRoute.params.subscribe(params => {\n          this.id = params[\"id\"];\n        });\n        this.findBoardsById();\n        this.spinner.hide();\n      });\n    }\n\n    updateBoardList(user) {\n      return __awaiter(this, void 0, void 0, function* () {\n        console.log(user);\n        this.boards = yield this.userService.findBoardsByUsername(user.username);\n        console.log(this.boards);\n      });\n    }\n\n    openCardDialog(id, column) {\n      let dialogRef = this.dialog.open(CardDetailsComponent, {\n        autoFocus: false,\n        maxHeight: \"90vh\",\n        data: {\n          id: id,\n          column: column\n        }\n      });\n      dialogRef.afterClosed().subscribe(result => {\n        this.findBoardsById();\n      });\n    }\n\n    findBoardsById() {\n      this.boardService.findById(this.id).subscribe(board => {\n        this.board = board;\n        const columns = board.columns;\n        this.connectedTo = [];\n        columns.forEach(column => {\n          this.connectedTo.push(column.id);\n        });\n      });\n    }\n\n    saveColumn() {\n      this.formNameDialogService.confirmed().then(result => __awaiter(this, void 0, void 0, function* () {\n        if (result) {\n          this.columnService.saveName(this.id, result).subscribe(column => {\n            this.notificationService.open(column.message);\n            this.findBoardsById();\n          }, error => {\n            this.notificationService.open(error, \"failed\");\n          });\n        }\n      }));\n    }\n\n    updateColumnName(idColumn, name) {\n      this.formNameDialogService.confirmed(name).then(result => __awaiter(this, void 0, void 0, function* () {\n        if (result) {\n          this.columnService.updateName(idColumn, result).subscribe(column => {\n            this.notificationService.open(column.message);\n            this.findBoardsById();\n          }, error => {\n            this.notificationService.open(error, \"failed\");\n          });\n        }\n      }));\n    }\n\n    deleteColumn(id) {\n      const message = `Are you sure you want to do this?\n    If you have Cards and Attachments, they will be permanently deleted.`;\n      const dialogData = new ConfirmDialogRequest(\"Confirm Action\", message);\n      const dialogRef = this.dialog.open(ConfirmDialogComponent, {\n        maxWidth: \"400px\",\n        data: dialogData\n      });\n      dialogRef.afterClosed().subscribe(result => {\n        if (result) {\n          this.columnService.deleteById(id).subscribe(column => {\n            this.notificationService.open(column.message);\n            this.findBoardsById();\n          }, error => {\n            this.notificationService.open(error, \"failed\");\n          });\n        }\n      });\n    }\n\n    saveCard(idColumn) {\n      this.formNameDialogService.confirmed().then(result => __awaiter(this, void 0, void 0, function* () {\n        if (result) {\n          this.cardService.saveName(idColumn, result).subscribe(apiResponse => {\n            this.notificationService.open(apiResponse.message);\n            this.findBoardsById();\n          }, error => {\n            this.notificationService.open(error, \"failed\");\n          });\n        }\n      }));\n    }\n\n    deleteCard(id) {\n      this.cardService.deleteById(id).subscribe(apiResponse => {\n        this.notificationService.open(apiResponse.message);\n        this.findBoardsById();\n      }, error => {\n        this.notificationService.open(error, \"failed\");\n      });\n    }\n\n    updateCardName(id, name) {\n      this.formNameDialogService.confirmed(name).then(result => __awaiter(this, void 0, void 0, function* () {\n        if (result) {\n          this.cardService.updateName(id, result).subscribe(apiResponse => {\n            this.notificationService.open(apiResponse.message);\n            this.findBoardsById();\n          }, error => {\n            this.notificationService.open(error, \"failed\");\n          });\n        }\n      }));\n    }\n\n    onDropColumns(event) {\n      var _a;\n\n      const idBoardReference = (_a = event.previousContainer.data[0]) === null || _a === void 0 ? void 0 : _a.idBoard;\n      const currentIndex = event.previousIndex;\n      const desiredIndex = event.currentIndex;\n\n      if (currentIndex !== desiredIndex) {\n        this.columnService.changePosition(idBoardReference, currentIndex, desiredIndex).subscribe(apiResponse => {\n          this.notificationService.open(apiResponse.message);\n          this.findBoardsById();\n        }, error => {\n          this.notificationService.open(error, \"failed\");\n        });\n      } else {\n        this.notificationService.open(\"Failed to change position\");\n      }\n    }\n\n    onDropCards(event) {\n      var _a;\n\n      const idColumn = (_a = event.previousContainer.data[0]) === null || _a === void 0 ? void 0 : _a.idColumn;\n      const currentIndex = event.previousIndex;\n      const desiredIndex = event.currentIndex;\n      const desiredData = event.container.data[desiredIndex];\n      const currentData = event.previousContainer.data[currentIndex];\n\n      if (desiredData === undefined || currentData.idColumn !== desiredData.idColumn) {\n        this.cardService.moveCardToAnotherColumn(currentData.id, desiredIndex, event.container.id).subscribe(apiResponse => {\n          this.notificationService.open(apiResponse.message);\n          this.findBoardsById();\n        }, error => {\n          this.notificationService.open(error, \"failed\");\n        });\n      } else if (currentData.idColumn === desiredData.idColumn && currentData.position !== desiredData.position) {\n        this.cardService.changeCardPosition(idColumn, currentIndex, desiredIndex).subscribe(apiResponse => {\n          this.notificationService.open(apiResponse.message);\n          this.findBoardsById();\n        }, error => {\n          this.notificationService.open(error, \"failed\");\n        });\n      } else {\n        this.notificationService.open(\"Failed to change position\");\n      }\n    }\n\n  }\n\n  UpdateBoardComponent.ɵfac = function UpdateBoardComponent_Factory(t) {\n    return new (t || UpdateBoardComponent)(i0.ɵɵdirectiveInject(i1.UserService), i0.ɵɵdirectiveInject(i2.BoardDetailsService), i0.ɵɵdirectiveInject(i3.ColumnService), i0.ɵɵdirectiveInject(i4.CardService), i0.ɵɵdirectiveInject(i5.FormNameDialogService), i0.ɵɵdirectiveInject(i6.ActivatedRoute), i0.ɵɵdirectiveInject(i7.MatDialog), i0.ɵɵdirectiveInject(i8.NgxSpinnerService), i0.ɵɵdirectiveInject(i9.NotificationService));\n  };\n\n  UpdateBoardComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: UpdateBoardComponent,\n    selectors: [[\"app-update-board\"]],\n    decls: 33,\n    vars: 7,\n    consts: [[1, \"select-class\"], [\"appearance\", \"fill\"], [3, \"value\", \"valueChange\"], [3, \"value\", \"onSelectionChange\", 4, \"ngFor\", \"ngForOf\"], [3, \"value\", 4, \"ngFor\", \"ngForOf\"], [\"fxLayout\", \"column \", 1, \"board\", \"board--wrapper\"], [1, \"board__header\"], [1, \"board__title\"], [\"fxLayout\", \"row\", \"fxLayoutGap\", \"15px\", \"cdkDropList\", \"\", \"cdkDropListOrientation\", \"horizontal\", 3, \"cdkDropListData\", \"cdkDropListDropped\"], [\"fxFlex\", \"250px\", \"fxFlexAlign\", \"start\", \"class\", \"columns\", \"cdkDrag\", \"\", 4, \"ngFor\", \"ngForOf\"], [\"mat-raised-button\", \"\", 3, \"click\"], [3, \"value\", \"onSelectionChange\"], [3, \"value\"], [\"fxFlex\", \"250px\", \"fxFlexAlign\", \"start\", \"cdkDrag\", \"\", 1, \"columns\"], [1, \"columns__title\"], [\"fxLayout\", \"column\", \"fxLayoutGap\", \"12px\", \"cdkDropList\", \"\", 1, \"cards\", 3, \"id\", \"cdkDropListData\", \"cdkDropListConnectedTo\", \"cdkDropListDropped\"], [\"class\", \"cards__item\", \"cdkDrag\", \"\", 3, \"cdkDragData\", 4, \"ngFor\", \"ngForOf\"], [\"fxLayout\", \"column\"], [\"fxFlex\", \"\", \"mat-raised-button\", \"\", 3, \"click\"], [\"fxLayout\", \"row\", 1, \"columns__bottom\"], [\"fxFlex\", \"50\", \"fxLayoutAlign\", \"center center\", \"mat-raised-button\", \"\", \"color\", \"warn\", 3, \"click\"], [\"fxFlex\", \"50\", \"fxLayoutAlign\", \"center center\", \"mat-raised-button\", \"\", 3, \"click\"], [\"cdkDrag\", \"\", 1, \"cards__item\", 3, \"cdkDragData\"], [\"matLine\", \"\", 4, \"ngIf\"], [\"matLine\", \"\", 3, \"click\"], [1, \"cards__title\"], [\"matLine\", \"\", \"fxShow\", \"true\", 1, \"cards__buttons\"], [\"fxFlex\", \"1 1 0\"], [\"fxShow\", \"true\"], [\"mat-icon-button\", \"\", \"color\", \"warn\", 3, \"click\"], [\"matLine\", \"\"], [1, \"cards__thumbnail\", 3, \"src\", \"alt\"]],\n    template: function UpdateBoardComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelement(0, \"nav-menu\");\n        i0.ɵɵtext(1, \"\\\\\\n\");\n        i0.ɵɵelementStart(2, \"div\", 0)(3, \"h3\");\n        i0.ɵɵtext(4, \"Select an user\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(5, \"mat-form-field\", 1)(6, \"mat-label\");\n        i0.ɵɵtext(7, \"User list\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(8, \"mat-select\", 2);\n        i0.ɵɵlistener(\"valueChange\", function UpdateBoardComponent_Template_mat_select_valueChange_8_listener($event) {\n          return ctx.selectedUser = $event;\n        });\n        i0.ɵɵtemplate(9, UpdateBoardComponent_mat_option_9_Template, 2, 2, \"mat-option\", 3);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(10, \"h3\");\n        i0.ɵɵtext(11, \"Select a board\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(12, \"mat-form-field\", 1)(13, \"mat-label\");\n        i0.ɵɵtext(14, \"Board list\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(15, \"mat-select\", 2);\n        i0.ɵɵlistener(\"valueChange\", function UpdateBoardComponent_Template_mat_select_valueChange_15_listener($event) {\n          return ctx.selectedBoard = $event;\n        });\n        i0.ɵɵtemplate(16, UpdateBoardComponent_mat_option_16_Template, 2, 2, \"mat-option\", 4);\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelement(17, \"br\")(18, \"br\");\n        i0.ɵɵelementStart(19, \"section\", 5)(20, \"div\", 6)(21, \"mat-toolbar\")(22, \"h4\", 7);\n        i0.ɵɵtext(23);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelement(24, \"br\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(25, \"div\", 8);\n        i0.ɵɵlistener(\"cdkDropListDropped\", function UpdateBoardComponent_Template_div_cdkDropListDropped_25_listener($event) {\n          return ctx.onDropColumns($event);\n        });\n        i0.ɵɵtemplate(26, UpdateBoardComponent_mat_card_26_Template, 17, 5, \"mat-card\", 9);\n        i0.ɵɵelementStart(27, \"div\")(28, \"button\", 10);\n        i0.ɵɵlistener(\"click\", function UpdateBoardComponent_Template_button_click_28_listener() {\n          return ctx.saveColumn();\n        });\n        i0.ɵɵelementStart(29, \"mat-icon\");\n        i0.ɵɵtext(30, \"add_box\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(31, \"span\");\n        i0.ɵɵtext(32, \" Add new Column\");\n        i0.ɵɵelementEnd()()()()();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(8);\n        i0.ɵɵproperty(\"value\", ctx.selectedUser);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngForOf\", ctx.users);\n        i0.ɵɵadvance(6);\n        i0.ɵɵproperty(\"value\", ctx.selectedBoard);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngForOf\", ctx.boards);\n        i0.ɵɵadvance(7);\n        i0.ɵɵtextInterpolate(ctx.board.name);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"cdkDropListData\", ctx.board.columns);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngForOf\", ctx.board.columns);\n      }\n    },\n    directives: [i10.MainComponent, i11.MatFormField, i11.MatLabel, i12.MatSelect, i13.NgForOf, i14.MatOption, i15.DefaultLayoutDirective, i16.MatToolbar, i15.DefaultLayoutGapDirective, i17.MatCard, i15.DefaultFlexDirective, i15.DefaultFlexAlignDirective, i17.MatCardTitle, i17.MatCardContent, i18.MatList, i18.MatListItem, i13.NgIf, i14.MatLine, i19.DefaultShowHideDirective, i20.MatIcon, i21.MatButton, i22.MatDivider, i17.MatCardActions, i15.DefaultLayoutAlignDirective],\n    styles: [\".select-class[_ngcontent-%COMP%]{display:flex;flex-direction:row;justify-content:space-around}\"]\n  });\n  return UpdateBoardComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}