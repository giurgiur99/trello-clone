{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport { FileUploader } from 'ng2-file-upload';\nimport { ConfirmDialogRequest } from 'src/app/core/interface/core.interface';\nimport { ConfirmDialogComponent } from 'src/app/shared/component/confirm-dialog/confirm-dialog.component';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/modules/user/shared/user.service\";\nimport * as i2 from \"@angular/material/dialog\";\nimport * as i3 from \"../../shared/change-password-dialog.service\";\nimport * as i4 from \"../../shared/change-email-dialog.service\";\nimport * as i5 from \"src/app/shared/component/form-name-dialog/form-name-dialog.service\";\nimport * as i6 from \"src/app/core/services/notification.service\";\nimport * as i7 from \"@angular/router\";\n\nfunction ProfileComponent_div_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"div\", 7);\n  }\n}\n\nfunction ProfileComponent_div_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵelement(1, \"img\", 8);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵpropertyInterpolate1(\"src\", \"data:image/jpeg;base64,\", ctx_r1.UserProfileDetailResponse == null ? null : ctx_r1.UserProfileDetailResponse.profilePicture.data, \"\", i0.ɵɵsanitizeUrl);\n  }\n}\n\nexport let ProfileComponent = /*#__PURE__*/(() => {\n  class ProfileComponent {\n    constructor(userService, dialog, changePasswordDialogService, changeEmailDialogService, formNameDialogService, notificationService, router) {\n      this.userService = userService;\n      this.dialog = dialog;\n      this.changePasswordDialogService = changePasswordDialogService;\n      this.changeEmailDialogService = changeEmailDialogService;\n      this.formNameDialogService = formNameDialogService;\n      this.notificationService = notificationService;\n      this.router = router;\n      this.UserProfileDetailResponse = {\n        id: '',\n        name: '',\n        username: '',\n        email: '',\n        joinedAt: undefined\n      };\n    }\n\n    ngOnInit() {\n      const maxFileSize5MB = 5 * 1024 * 1024;\n      this.getCurrentUser();\n      this.uploader = new FileUploader({\n        isHTML5: true,\n        maxFileSize: maxFileSize5MB,\n        autoUpload: false,\n        allowedMimeType: ['image/png', 'image/jpeg', 'image/jpg'],\n        headers: [{\n          name: 'Content-Type',\n          value: 'application/octed-stream'\n        }]\n      });\n\n      this.uploader.onWhenAddingFileFailed = (item, filter) => {\n        let message = '';\n\n        switch (filter.name) {\n          case 'fileSize':\n            message = 'The file\"' + item.name + '\" is ' + this.formatBytes(item.size) + ', this exceeds the maximum allowed size of ' + this.formatBytes(maxFileSize5MB);\n            break;\n\n          default:\n            message = 'Error trying to upload file ' + item.name;\n            break;\n        }\n      };\n\n      this.uploader.onAfterAddingFile = fileItem => {\n        let file = fileItem._file;\n        let profilePicture = new FormData();\n        profilePicture.append('profilePicture', file);\n        this.setProfilePicture(profilePicture);\n      };\n    }\n\n    formatBytes(bytes, decimals) {\n      if (bytes == 0) return '0 Bytes';\n      const k = 1024,\n            dm = decimals || 2,\n            sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'],\n            i = Math.floor(Math.log(bytes) / Math.log(k));\n      return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + ' ' + sizes[i];\n    }\n\n    changeEmail() {\n      this.changeEmailDialogService.confirm(this.UserProfileDetailResponse).then(apiResponse => __awaiter(this, void 0, void 0, function* () {\n        if (apiResponse) {\n          this.notificationService.open(apiResponse.message);\n        }\n      }));\n      this.getCurrentUser();\n    }\n\n    changePassword() {\n      this.changePasswordDialogService.confirm(this.UserProfileDetailResponse.id).then(apiResponse => __awaiter(this, void 0, void 0, function* () {\n        if (apiResponse) {\n          this.notificationService.open(apiResponse.message);\n        }\n      }));\n      this.getCurrentUser();\n    }\n\n    updateName() {\n      this.formNameDialogService.confirmed(this.UserProfileDetailResponse.name).then(result => __awaiter(this, void 0, void 0, function* () {\n        if (result) {\n          this.userService.updateName(this.UserProfileDetailResponse.id, result).subscribe(apiResponse => {\n            this.getCurrentUser();\n            this.notificationService.open(apiResponse.message);\n          });\n        }\n      }));\n    }\n\n    setProfilePicture(profilePicture) {\n      this.userService.setProfilePicture(this.UserProfileDetailResponse.id, profilePicture).subscribe(apiResponse => {\n        this.getCurrentUser();\n        this.notificationService.open(apiResponse.message);\n      });\n    }\n\n    getCurrentUser() {\n      this.userService.currentUser().subscribe(user => {\n        this.userService.findUserProfileByUsername(user.username).subscribe(userProfileDetail => {\n          this.UserProfileDetailResponse = userProfileDetail;\n        });\n      });\n    }\n\n    deleteMyAccount(id) {\n      const message = `Your account will be deleted forever, are you sure?`;\n      const dialogData = new ConfirmDialogRequest('Confirm Action', message);\n      const dialogRef = this.dialog.open(ConfirmDialogComponent, {\n        maxWidth: '400px',\n        data: dialogData\n      });\n      dialogRef.afterClosed().subscribe(result => {\n        if (result) {\n          this.userService.deleteAccount(id).subscribe(apiResponse => {\n            this.notificationService.open(apiResponse.message);\n            this.router.navigate(['auth/signin']);\n          }, error => {\n            this.notificationService.open(error, 'failed');\n          });\n        }\n      });\n    }\n\n  }\n\n  ProfileComponent.ɵfac = function ProfileComponent_Factory(t) {\n    return new (t || ProfileComponent)(i0.ɵɵdirectiveInject(i1.UserService), i0.ɵɵdirectiveInject(i2.MatDialog), i0.ɵɵdirectiveInject(i3.ChangePasswordDialogService), i0.ɵɵdirectiveInject(i4.ChangeEmailDialogService), i0.ɵɵdirectiveInject(i5.FormNameDialogService), i0.ɵɵdirectiveInject(i6.NotificationService), i0.ɵɵdirectiveInject(i7.Router));\n  };\n\n  ProfileComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: ProfileComponent,\n    selectors: [[\"app-profile\"]],\n    decls: 23,\n    vars: 6,\n    consts: [[1, \"profile-card\"], [\"mat-card-avatar\", \"\", \"class\", \"profile-image\", 4, \"ngIf\"], [4, \"ngIf\"], [\"mat-button\", \"\", 3, \"click\"], [\"hidden\", \"\", \"type\", \"file\", \"accept\", \".png, .jpg, .jpeg\", \"name\", \"profileImage\", \"ng2FileSelect\", \"\", 3, \"uploader\"], [\"fileInput\", \"\"], [\"mat-button\", \"\", \"color\", \"warn\", 3, \"click\"], [\"mat-card-avatar\", \"\", 1, \"profile-image\"], [\"mat-card-avatar\", \"\", \"alt\", \"\", 3, \"src\"]],\n    template: function ProfileComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        const _r3 = i0.ɵɵgetCurrentView();\n\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"mat-card\")(2, \"mat-card-header\");\n        i0.ɵɵtemplate(3, ProfileComponent_div_3_Template, 1, 0, \"div\", 1);\n        i0.ɵɵtemplate(4, ProfileComponent_div_4_Template, 2, 1, \"div\", 2);\n        i0.ɵɵelementStart(5, \"mat-card-title\");\n        i0.ɵɵtext(6);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(7, \"mat-card-subtitle\")(8, \"p\");\n        i0.ɵɵtext(9);\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(10, \"mat-card-actions\")(11, \"button\", 3);\n        i0.ɵɵlistener(\"click\", function ProfileComponent_Template_button_click_11_listener() {\n          return ctx.changeEmail();\n        });\n        i0.ɵɵtext(12, \"Change Email\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(13, \"button\", 3);\n        i0.ɵɵlistener(\"click\", function ProfileComponent_Template_button_click_13_listener() {\n          return ctx.changePassword();\n        });\n        i0.ɵɵtext(14, \"Change Password\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(15, \"button\", 3);\n        i0.ɵɵlistener(\"click\", function ProfileComponent_Template_button_click_15_listener() {\n          return ctx.updateName();\n        });\n        i0.ɵɵtext(16, \"Edit Name\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(17, \"button\", 3);\n        i0.ɵɵlistener(\"click\", function ProfileComponent_Template_button_click_17_listener() {\n          i0.ɵɵrestoreView(_r3);\n\n          const _r2 = i0.ɵɵreference(20);\n\n          return _r2.click();\n        });\n        i0.ɵɵtext(18, \"Add Avatar\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(19, \"input\", 4, 5);\n        i0.ɵɵelementStart(21, \"button\", 6);\n        i0.ɵɵlistener(\"click\", function ProfileComponent_Template_button_click_21_listener() {\n          return ctx.deleteMyAccount(ctx.UserProfileDetailResponse.id);\n        });\n        i0.ɵɵtext(22, \" Delete Account \");\n        i0.ɵɵelementEnd()()()();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"ngIf\", (ctx.UserProfileDetailResponse == null ? null : ctx.UserProfileDetailResponse.profilePicture) === null);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.UserProfileDetailResponse.profilePicture !== null);\n        i0.ɵɵadvance(2);\n        i0.ɵɵtextInterpolate1(\" \", ctx.UserProfileDetailResponse.name, \" \");\n        i0.ɵɵadvance(3);\n        i0.ɵɵtextInterpolate2(\" \", ctx.UserProfileDetailResponse.username, \" \", ctx.UserProfileDetailResponse.email, \" \");\n        i0.ɵɵadvance(10);\n        i0.ɵɵproperty(\"uploader\", ctx.uploader);\n      }\n    },\n    styles: [\".profile-image[_ngcontent-%COMP%]{background-image:url(/assets/img/profileImage.png);background-size:cover}.profile-card[_ngcontent-%COMP%]{max-width:600px}\"]\n  });\n  return ProfileComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}